솔리드
S: 한가지 원칙 / 인터페이스는 2계층

O(확장에는 열려있고 수정에는 닫혀있고): 인터페이스, 소
     ㄴ 확장?

L:리스코프 ; 자식이 와서 아버지를 대체할 때 그렇게 못하게 하는 것 예를 들어 슈퍼클래스가 사각형, 서브클래스가 직사각형 (서프라이즈 > 상속안돼 ; 슈퍼클래스가 하는 걸 다 받아들여야 해)
사람이 있는데 남,여는 상속이 되. 사람이 있고 학생이 있고 직장인이 잇어 > 이건 상속이 안돼 왜? 시간에 따라 학생이 직장인이 되니까( 학생이 알바하면? 직장인이니까! 시간에 따라 달라짐)
객체 지향 프로그래밍에서 제일 중요한 단어? 상속! 상속은 왜 씀? 다형성! 
객체 지향은 다형성을 잘 쓰면 돼, 다형성 잘 쓰려면? 상속을 잘 해야해.
상속을 쓰면 맞는 경우, 쓰면 안되는 경우가 있음 > 이걸 이해하면 객체 지향 거의 다 이해한 거
소터가 컴페어러터를 썼지? 연관! 왜 상속 안 받았을까? 
소터에는 더블쏘터가 있지
컴페어러터는 바뀌니까 뺐잖아 (인티저, 스트링,..)            
컴페어러터에 상속받는 건 다 적용됨
compareTo(Object1, Object2) 자식이 이거 안쓰고 터틀써도 되? 새로 compareTo(turtle, turtle) 안돼! 슈퍼클래스가 가진 건 다 가져야해

I: 인터페이스 분리해서 쓰렴

D: 구현보다 추상에 의존하는 것 A -> BC 이거 상속하면 A -> B /<-C 의존관계가 바뀜
소팅하는 것도 인터페이스나 상속을 쓰면 의존관계가 역전이 됨.
Sorter 

프로그래밍할 때 격자무늬井로!

상속은 인터페이스나 세그리에이션을 쓴다
엘에스피에 따르면 상속을 쓰지 않을때 연관을 쓴다
플밍은 상속을 쓰는데 쓰지 말아야할 때는 연관을 쓴다! (엘에스피의 원칙)
연관 쓸 때 위의 ->(슈퍼끼리의 연관관계)

패턴 배울 때 질문해야할 3가지
1. 문제가 뭐지?
2. 어떻게 고치지?
3. 뭐가 좋아지지?

디자인 패턴은 사실 적용하지 않아도 괜찮아. 적용하면 소스코드가 예뻐져 
기능은 다 돌아가는데 뭐가 문제지를 찾아내야함
옵저버 패턴을 적용했을 때 문제가 되는 건
강사가 수업시간을 변경했어 학생이 묻는다 > 문제 있어? 있는 걸 발견해야 패턴을 배울 수 있음
문제는? 학생이 계속 물어야함(강사<-학생) polliy> 문제야 > 어떻게 바꿔줘야 해? (강사->학생) push : 팟캐스트 방식(RSS)
신문 사이트마다 들어가서 보는 거 > 폴리
푸시방식 > 뉴스, 포털
폴리에서 푸시로 바꾸는 것 > 옵저버 패턴을 한다
1대N 관계에서 정보 공급측에서 정보 변경할 때 다수의 정보 사용자가 매번 묻는 게 아니라 정보가 바뀔 때 공급측에서 사용자에게 알려주는 것
옵저버는 절차가 있음
어떻게 바꿔줘야해?
1.등록절차 EX 신문 볼때 구독신청을 함
디자인패턴 배우려면 플로어를 가지고 있어야해
2.등록된 사용자에게 푸시
정보 받은 사용자는 사용하면 되는 거 
3.해제절차
버전0이랑 버전1을 다 만들면 시간이 많이 걸려
버전1만 만들 것.

유엠엘그리고 코딩하자!
시험에 유엠엘 낼거라능~~~~~~~~~~입사시험에 나옴 옵저버를 클래스 다이어그램으로 그려봐라

자바에는 디자인패턴이 대부분 들어가있음
얼마전에 자바가 디자인 패턴 넣은 걸 특허 걸어서 법정문제가 있었음
패턴 만들어놓은 게 특허 대상

저번 시간에는 구현된 걸 쓰기도 하고 구현하기도 했는데 
옵저버 패턴은 자바가 구현하고 있어서 책에서는 구현함

java Observer 검색
퍼블릭으로 구현
함수가 업데이트 하나 있음 > 이걸 똑같이 구현해야함
클래스가 java.util
void > 리턴

옵저버 패턴 : 일대엔 관계에서 정보 공급자와 사용자가 있었는데 - 신문하고 구독자
옵저버는 구독자! > 옵저버를 다른 말로 섭스크라이버라고도함(subscriver)
업데이트 함수 하나
신문이 새로운 게 반응이 되면 업데이트 함수가 실행되고 옵저버가 알겠지

아규먼트 잘 보기!
옵저버블은? 신문! 구독할 수 있는/ 신문을 옵저버블에 넘겨줘야함 
오브젝트는? 메세지! 
책에서는 오브젝트 빼고 구현함 
다르게 구현하고 싶으면 자기가 자바유틸꺼 아니고 만들어서 쓰면 됨
책 예제는 만들어서 씀

옵저버블은 컴페어투처럼 아규먼트가 넓다!

모든 클래스는 오브젝트가 가진 함수를 갖고 있다> 모든 클래스의 시조(전체 객체)
옵저버블은 신문 , 클래스니까 상속받음

왜 노티파이옵저버스일까? 구독자가 많으니까 > 일대 엔 관계!
등록해서 가지고 있다가 알려줄 때 업데이트 함수를 씀!(다형성)

맘터틀이 베이비터틀 쫓아다닐꼬ㅓ

다중상속은 상속을 다중으로 받는 것 > 단일상속만됨 > 하나를 인터페이스로 만들어

Turtle baby; >> 필드로 가지고 있는 것

베이비를 필드에 저장하는 건 여러 함수에서 쓰는 경우에!

mom.moveTo(100,100);
    baby.move(100,-100);
상속이 아니라 연관 관계로 가져감
노티파이 먼저하지 말고 위치부터 바꿔야함 