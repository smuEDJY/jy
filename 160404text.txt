class component  //이거 안쓰면 시퀀스 다이어그램을 만들어버림 //
class Decorator {
    c:Component
}
Component <|-- concreteComponent1
Component <|-- concreteComponent2
Component <|-- Decorator
Decorator *--> Component //속성을 슈퍼클래스로 연관관계로 데리고 감, 이게 나오면 보통 데코레이터 패턴 //

위에거 완성본
class Component {
    getDescription()
    cost()
}
class Decorator {
    c:Component
    abstract getDescription()
}
Component <|-- concreteComponent1
Component <|-- concreteComponent2
Component <|-- Decorator
Decorator *--> Component
Decorator <|-- ConcreteDecorator


시퀀스 다이어그램 > 패턴은 그 안에 절차가 있음

client > 메인 함수가 있는 것

client -> Beverage
Beverage -> HouseBlend:new()

이렇게 하면
Beverage b = new HouseBlend() 가 되는 것 

client -> Soy:new(b3)
생성자 안에 넣는 방법으로 데코레이션을 한 것 
넣는 것을 계속 반복함

나머지 알아서 그려보렴


파일 다음 디비를 배움
자바에서 파일하기가 복잡함
두가지 방식 리더 스트림
스트림 방식은 멀티미디어(이미지. 동영상, 음성 : 바이너리)
리더 방식은 문자 + 롸이터

데코레이터 ; 슈퍼클래스를 가져감

세미콜론 : 문장 끝났다!
> import java.io.File
> import java.io.File;  엔터치면 똑같으니까 써도되고 안써도 되고

File java io파일

java file > constructor summary

iava FileInputStream


> (char)112
'p'
> (char)isReadme.read()
'u'
> (char)isReadme.read()
'b'
> (char)isReadme.read()
'l'
> (char)isReadme.read()
'i'
> (char)isReadme.read()
'c'
> 

포인터가 움직이면서 한글자씩 읽는 것
끝에 가면 (마지막 값을 읽으면 null 이 나옴)

buffer 파일 입출력을 하는데 코스트가 많이 듬
쓸 때도 1바이트씩 쓰지 않고 묶어서 씀
빠르게 하기 위해서 n번 할 것을 버퍼를 이용해서 줄임

BufferedInputStream bis = new BufferedInputStream(isReadme)
                                                                                     ㄴ 이안에 인풋스트림이 들어간 것

io는 무겁기 때문에 매번 엑세스를 안함

java printWriter 

throws exception 처리하는 것